using UnityEngine;
using UnityEngine.InputSystem;

public class PlayerMovement : MonoBehaviour
{
    public float moveSpeed = 5f;
    public float jumpForce = 5f;
    public Transform cameraTransform; // –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–º–µ—Ä—É
    private Rigidbody rb;
    private bool isGrounded;

 // üå™ –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –ø—Ä–µ—Ñ–∞–±–∞ –ø—ã–ª–∏
    public GameObject dustEffectPrefab; 
    private GameObject dustEffectInstance; // –≠–∫–∑–µ–º–ø–ª—è—Ä —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø—ã–ª–∏
    void Start()
    {
        rb = GetComponent<Rigidbody>();
        rb.freezeRotation = true; // –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—Ä–∞—â–µ–Ω–∏–µ —Ç–µ–ª–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        // üå™ –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø—ã–ª–∏ –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –ø–µ—Ä—Å–æ–Ω–∞–∂—É
        if (dustEffectPrefab != null)
        {
            dustEffectInstance = Instantiate(dustEffectPrefab, transform.position, Quaternion.identity);
            dustEffectInstance.transform.parent = transform; // –î–µ–ª–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–º –æ–±—ä–µ–∫—Ç–æ–º
            dustEffectInstance.SetActive(false); // –û—Ç–∫–ª—é—á–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –Ω–∞ —Å—Ç–∞—Ä—Ç–µ
        }
    }

    void FixedUpdate()
    {
        // –ß–∏—Ç–∞–µ–º –≤–≤–æ–¥ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        float moveX = (Keyboard.current.dKey.isPressed ? 1f : 0f) - (Keyboard.current.aKey.isPressed ? 1f : 0f);
        float moveZ = (Keyboard.current.wKey.isPressed ? 1f : 0f) - (Keyboard.current.sKey.isPressed ? 1f : 0f);

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–∞–º–µ—Ä—ã
        Vector3 moveDirection = cameraTransform.right * moveX + cameraTransform.forward * moveZ;
        moveDirection.y = 0; // –£–±–∏—Ä–∞–µ–º –Ω–∞–∫–ª–æ–Ω –≤–≤–µ—Ä—Ö-–≤–Ω–∏–∑

        // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ, –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        if (moveDirection.magnitude > 0.1f)
        {
            Quaternion targetRotation = Quaternion.LookRotation(moveDirection);
            transform.rotation = Quaternion.Slerp(transform.rotation, targetRotation, Time.fixedDeltaTime * 4f);
        }

        // –î–≤–∏–∂–µ–Ω–∏–µ
        rb.linearVelocity = new Vector3(moveDirection.x * moveSpeed, rb.linearVelocity.y, moveDirection.z * moveSpeed);

        // üå™ –í–∫–ª—é—á–∞–µ–º –∏–ª–∏ –æ—Ç–∫–ª—é—á–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø—ã–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–≤–∏–∂–µ–Ω–∏—è
        if (dustEffectInstance != null)
        {
            bool isMoving = moveDirection.magnitude > 0.1f && isGrounded;
            dustEffectInstance.SetActive(isMoving);
            // üå™ –û–ø—É—Å–∫–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø—ã–ª–∏ –∫ –Ω–æ–≥–∞–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        if (isMoving)
        {
            dustEffectInstance.transform.position = transform.position - new Vector3(0, 0.5f, 0); // –û–ø—É—Å–∫–∞–µ–º –Ω–∞ 0.5 –≤–Ω–∏–∑
        }
            
        }
    }

    void Update()
    {
        // –ü—Ä—ã–∂–æ–∫
        if (Keyboard.current.spaceKey.wasPressedThisFrame && isGrounded)
        {
            rb.linearVelocity = new Vector3(rb.linearVelocity.x, jumpForce, rb.linearVelocity.z);
            isGrounded = false;

            // üå™ –û—Ç–∫–ª—é—á–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø—ã–ª–∏ –ø—Ä–∏ –ø—Ä—ã–∂–∫–µ
            if (dustEffectInstance != null)
            {
                dustEffectInstance.SetActive(false);
            }
        }
    }

    void OnCollisionEnter(Collision collision)
    {
        if (collision.gameObject.CompareTag("Ground"))
        {
            isGrounded = true;
             
        }
    }
}
